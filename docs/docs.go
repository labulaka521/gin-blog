// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-03-12 15:26:38.454376 +0800 CST m=+0.051133876

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "An example of gin",
        "title": "Golang Gin API",
		"termsOfService": "https://github.com/EDDYCJY/go-gin-example",
        "contact": {},
        "license": {
			"name": "MIT",
			"url": "https://github.com/EDDYCJY/go-gin-example/blob/master/LICENSE"
		},
        "version": "1.0"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
		"/api/v1/articles": {
			"get": {
				"produces": [
                    "application/json"
                ],
				"summary": "Get multiple articles",
				"parameters": [
					{
                        "description": "TagID",
                        "name": "tag_id",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "State",
                        "name": "state",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "CreatedBy",
                        "name": "created_by",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
					{
                        "description": "Token",
                        "name": "token",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
						"required": true
                    }
				],
				"responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
					"400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    }
                }
			}
		},
		"/api/v1/articles/{id}": {
			"get": {
				"produces": [
                    "application/json"
                ],
				"summary": "Get a single articles",
				"parameters": [
                    {
                        "description": "articles ID",
                        "name": "id",
                        "in": "path",
                        "schema": {
                            "type": "integer"
                        },
						"required": true
                    },
					{
                        "description": "Token",
                        "name": "token",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
						"required": true
                    }
				],
				"responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
					"400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    }
                }
			}
		},
		"/auth": {
			"get": {
				"produces": {
					"application/json"
				},
				"summary": "Get Request Token",
				"parameters": [
					{
						"description": "Username",
						"name": "username",
						"in": "query",
						"schema": {
                            "type": "string"
                        },
						"required": true
					},
					{
						"description": "User Password",
						"name": "password",
						"in": "query",
						"schema": {
                            "type": "string"
                        },
						"required": true
					},
				],
				"responses": {
					"200": {
						"description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
					},
					"400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
					"20003": {
                        "description": "User Or Password Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    },
					"20004": {
                        "description": "User Not Exist",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/app.Response"
                        }
                    }
				}
			}
		}
	},
	"definitions": {
        "app.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
